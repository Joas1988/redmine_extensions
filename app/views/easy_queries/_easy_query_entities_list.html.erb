<%
user ||= User.current; block_name ||= ''; uniq_id ||= ''; page_module ||= nil

options ||= Hash.new
groups ||= []
groups_url ||= params
modul_uniq_id ||= "#{controller_name}_#{action_name}"; uniq_id ||= modul_uniq_id
options[:block_name] ||= block_name; options[:uniq_id] ||= uniq_id
options[:page_module] ||= page_module;
options[:hascontextmenu] = false if !options.key?(:hascontextmenu)
unless options.key?(:hide_sums_in_group_by)
  options[:hide_sums_in_group_by] = true
end
output ||= query.outputs.first
# available *options*
# * :disable_sort  => true - change header from sorting_link to plain text
# * :modal_selector => true - display view as lookup window, with selectable rows. Require parameters for modal selector
# * :go_to_url => {:controller => ...} - set rows clickable, jump to url...
# * :hide_sums_in_group_by => true - This hide sums and count of records in group by row.
# * :hascontextmenu => true/false
-%>
<%= form_tag({}, :id => "easy-query-list-#{query.entity.name.underscore.dasherize}") do -%>
  <table class="list entities <%= query.entity.name.pluralize.downcase %> <%= modul_uniq_id %> <%= sort_css_classes %>" data-hascontextmenu="<%= !!options[:hascontextmenu] -%>">
  <%# easy_cache ['easy_query_header', block_name, I18n.locale] do  %>
    <thead>
      <%= output.render_period_header %>
      <%= call_hook :easy_query_table_render_before, query: query, options: options %>
      <tr>
        <%= content_tag(:th, link_to('', 'javascript:void(0)', :onclick => 'toggleIssuesSelection(this)',
            :title => "#{l(:button_check_all)}/#{l(:button_uncheck_all)}", :class => 'icon icon-checked'), :class => 'hide-when-print') if options[:hascontextmenu] -%>
        <th class="hide-when-print easy-query-additional-beginning-buttons"></th>
        <% query.inline_columns.each do |column| -%>
          <%= query.column_header(column, options) %>
        <% end -%>
        <%= content_tag(:th, nil, :class => 'hide-when-print') if options[:modal_selector].to_s == 'true' -%>
        <th class="hide-when-print easy-query-additional-ending-buttons"></th>
      </tr>
      <% easy_query_first_sumable_index = -1 %>
      <% if query.show_sum_row? && query.inline_columns.detect{|i| easy_query_first_sumable_index += 1; i.sumable?} %>
        <% easy_query_first_sumable_index = 1 if easy_query_first_sumable_index < 1
           sumable_colspan = easy_query_first_sumable_index
        %>
        <tr id="totalsum-summary">
          <td id="summary-table-bottom-first-cell" colspan="<%= sumable_colspan %>">
            <div id="totalsum-description">
              <%= options[:label_sumable_header_total] || l(:label_total_total) %>
            </div>
          </td>
          <td class="hide-when-print"></td>
          <%= content_tag(:td, nil, :class => 'hide-when-print') if options[:hascontextmenu].to_s == 'true' -%>
          <% query.inline_columns[(easy_query_first_sumable_index)..(query.inline_columns.size-1)].each_with_index do |column, index| %>

            <% if column.sumable_header? %>
              <%= content_tag :td, format_html_entity_attribute(query.entity, column, query.entity_sum(column, entities: query.entities), :project => query.project).html_safe, :class => column.css_classes -%>
            <% else %>
              <%= content_tag :td -%>
            <% end %>
          <% end %>
          <%= content_tag(:td, nil, :class => 'hide-when-print') if options[:modal_selector].to_s == 'true' -%>
          <td class="hide-when-print"></td>
        </tr>
      <% end %>
    </thead>
  <%# end %>
    <tbody>
      <% if query.grouped? && params[:easy_query_q].blank? %>
        <%= render 'easy_queries/easy_query_groups', query: query, groups: query.entities, modul_uniq_id: modul_uniq_id, user: user, options: options %>
      <% else %>
        <%= render 'easy_queries/easy_query_entities', query: query, entities: query.entities, modul_uniq_id: modul_uniq_id, user: user, options: options %>
      <% end %>
    </tbody>
  </table>
  <%#= render :partial => 'easy_queries/easy_query_tooltip_box', :locals => {:block_name => options[:block_name], :uniq_id => options[:uniq_id]} -%>
<% end -%>

<%= render :partial => 'easy_queries/easy_query_tooltip_box' if options[:render_query_tooltip_box] %>

<p style="display: none;" class="infinite-scroll-load-next-page-trigger-container hide-when-print">
  <a href="javascript:void(0)" class="button-2 infinite-scroll-load-next-page-trigger"><%= l(:button_load_additional_records) %><i class="icon-arrow"></i></a>
</p>

<%# content_for :header_tags do %>
  <script type="text/javascript">

    $(document).ready(function() {
      $('table.entities.<%= modul_uniq_id %>').easygrouploader({
        loadUrl: '<%= url_for(groups_url.merge(:view_options => options, only_path: true)).html_safe %>',
        easy_query: '<%= query.class.name %>',
        load_opened: <%= !!query.load_groups_opened? %>,
        next_button_cols: '<%= query.inline_columns.count + 3 %>'
      });

      if (typeof setInfiniteScrollDefaults === 'function')
      {
        setInfiniteScrollDefaults();
        $('table.list.entities.<%= query.entity.name.pluralize.downcase -%>:first > tbody').infinitescroll({
          navSelector: 'p.pagination',
          nextSelector: 'p.pagination > a.next',
          itemSelector: 'table.list.entities.<%= query.entity.name.pluralize.downcase -%>:first > tbody > tr, p.pagination > a.next',
          binder: (window_size().width < 1100 ? $(window) : $('#content'))
        }, function(data, opts) {

          var $sumary_was = $(data[0]).prevAll('tr.summary').first();
          var $sumary_is;
          for (var i = 0; i < data.length; ++i) {
            $sumary_is = $(data[i]);
            if ($sumary_is.hasClass('summary'))
              break;
          }
          if ($sumary_is && $sumary_was && $sumary_is.data('uniq_id') === $sumary_was.data('uniq_id'))
            $sumary_was.remove();

          var a = $(data.pop());
          if (a.is('a')) {
            opts.path = [a.attr('href')];
            a.remove();
          } else {
            data.push(a[0]);
            opts.state.isPaused = true;
            $(".infinite-scroll-load-next-page-trigger").parent().hide();
          }
          $('.multieditable-container:not(.multieditable-initialized)').each(function() {
            initInlineEditForContainer(this);
          });
          initProjectEdit();
          initEasyAutocomplete();
          $('table.entities.<%= modul_uniq_id %>').easygrouploader('load_groups');
        });
      }
    });
    $(document).on('click', '.infinite-scroll-load-next-page-trigger', function(e) {
      $('table.list.entities.<%= query.entity.name.pluralize.downcase -%>:first > tbody').infinitescroll('retrieve', {});
      $(e.target).remove();
    });

  </script>
<%# end -%>
