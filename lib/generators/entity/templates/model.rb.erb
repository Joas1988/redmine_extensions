class <%= model_name %> < ActiveRecord::Base
  include Redmine::SafeAttributes

  <%= 'belongs_to :project' if project? %>
  <%= 'belongs_to :author, class_name: \'User\', foreign_key: \'author_id\'' if author? %>

  scope :visible, lambda { |*args|
    where(<%= model_name %>.visible_condition(args.shift || User.current, *args)<%= '.joins(:project)' if project? %>)
  }
  <% if name_column? %>
  scope :sorted, lambda { order("#{table_name}.<%= name_column %> ASC") }
  <% end %>

  <% if acts_as_searchable? %>
  acts_as_searchable :columns => [<%= string_columns.collect{|c| "\#{#{model_name}.table_name}.#{c}" }.join(', ') %>],
                     :date_column => :created_at
  <%- end -%>
  <%- if acts_as_customizable? -%>
  acts_as_customizable
  <% end %>

  <%= 'validates :project_id, :presence => true' if project? %>
  <%= 'validates :author_id, :presence => true' if author? %>

  attr_protected :id

  <%- if safe_columns.any? -%>
  safe_attributes <%= safe_columns.collect{|column_name| "'#{column_name}'"}.join(', ') %>
  <%- end -%>
  <%- if acts_as_customizable? -%>
  safe_attributes 'custom_field_values', 'custom_fields'
  <%- end -%>

  def self.visible_condition(user, options={})
  <%- if project? -%>
    Project.allowed_to_condition(user, :<%= view_permission %>, options)
  <%- else -%>
    '1=1'
  <%- end -%>
  end

  def self.css_icon
    'icon icon-user'
  end

  def visible?(user = nil)
    user ||= User.current
    user.allowed_to?(:<%= view_permission %>, <%= project? ? 'self.project' : 'nil' %>, global: true)
  end

  def editable?(user = nil)
    user ||= User.current
    user.allowed_to?(:<%= edit_permission %>, <%= project? ? 'self.project' : 'nil' %>, global: true)
  end

  <%- if name_column? -%>
  def to_s
    <%= name_column %>
  end
  <%- end -%>

end
